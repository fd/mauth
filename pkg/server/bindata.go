package server

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_login_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\xdd\x6f\xdb\x38\x12\x7f\xee\xfe\x15\x3c\x5f\x0b\xdb\x3d\x5b\x96\xed\x38\x4d\x1c\xc7\xb8\x6d\xaf\x40\x1f\x5a\x6c\xb1\x1f\xc0\xed\xd3\x81\x92\x28\x8b\x0d\x25\xea\x24\xca\x8e\x37\xc8\xfd\xed\x37\xfc\x94\x28\x3b\x9b\x14\x58\x18\x71\x2c\xce\x70\x3e\x7f\x33\x43\x71\xf3\xb7\x7f\xfd\xf4\xe1\xd7\xdf\xbf\x7e\x44\x99\xc8\xd9\xf6\x87\x8d\xfe\x87\xd0\x26\x23\x38\x91\x3f\xe0\x67\x4e\x04\x46\x71\x86\xab\x9a\x88\xdb\x41\x23\xd2\xe9\xd5\xc0\x90\x04\x15\x8c\x6c\x37\x33\xfd\x5f\xaf\xd5\xe2\xc8\x08\xca\x49\x42\xf1\xed\xa0\x8e\x2b\x42\x0a\x60\x57\xb4\xb7\xe8\x01\x45\xfc\x7e\x5a\xd3\x3f\x68\xb1\x5b\x47\xbc\x4a\x48\x35\x85\x95\x1b\xf4\xa8\x39\x22\x9e\x1c\xd1\x83\xfa\xf9\x2a\xe5\x85\x98\xa6\x38\xa7\xec\xb8\x46\x9f\x08\xdb\x13\x41\x63\x7c\xa3\x89\x11\x8e\xef\x76\x15\x6f\x8a\x64\x8d\xfe\x4e\x08\xd1\xcb\x08\x4d\x0f\x24\xba\xa3\xb0\x4f\x6e\xae\x73\xce\x45\x26\x55\x21\x5c\x08\x8a\x19\xc5\x35\x49\x34\xab\x51\x98\x49\x21\xa5\x55\x29\xc8\xbd\x98\x02\xdb\xae\x58\xc7\xa4\x10\xa4\x32\xda\x72\x5c\xed\x68\x31\x15\xbc\x5c\xa3\x0b\x92\xfb\x12\xe6\x13\x94\x2d\xc1\x33\xa5\xf2\x40\xe8\x2e\x13\x6b\xb4\x0c\xc3\x9b\x96\x03\xa8\x31\x67\xbc\x02\x5b\x2f\x97\xf2\xd3\xd2\x96\x1d\xda\x05\xbe\xba\x4e\x62\x47\x4b\x79\x95\x5b\xcb\x0e\x34\x11\x19\x88\xbd\x0a\xcb\x7b\xcf\x28\x65\x10\xc2\x8d\xe0\x66\xb9\xc4\x49\xa2\x5c\x5e\xc2\xfa\xa2\xfd\x3b\x17\xb8\x14\xcb\x8f\xa5\xa8\x74\xac\xd1\xbc\xbc\x47\x35\x67\x34\x81\xc0\x46\xf2\xe3\xe8\x90\xb9\x0c\x27\xfc\xb0\x46\xd5\x2e\xc2\xa3\x70\xa2\x3e\xc1\xfc\xe2\x3a\x5c\x8c\x11\x58\xa6\xf6\xca\x3f\xf8\x3d\xf1\x78\xc2\xeb\xab\xf0\xa2\xe5\x59\x68\x1e\x2f\x90\x81\x97\x8a\x92\xd7\x54\x50\x0e\xfe\x55\x84\x61\x41\xf7\xc4\xcf\x45\xc4\x85\xe0\x39\x78\xbf\xea\x89\xa1\x45\xd9\x08\x0f\x43\x00\x37\x02\x6e\x5d\xb9\xc8\xb9\x10\xcd\x95\x3d\xee\xcb\x89\x7a\x65\x61\x84\xcb\x92\xe0\x0a\x17\x31\x08\x28\x78\x61\x6d\x48\x68\x5d\x32\x0c\xb0\x8c\x18\x8f\xef\x9e\x8d\x6c\x2f\xf7\x5e\x46\xe7\x61\xf8\xa6\x97\x80\x8e\x22\x53\x22\x15\x4e\x68\x53\xaf\x51\xe8\x2f\xdb\x18\x74\x32\xf6\x6e\x25\x3f\xa7\x01\x59\xa7\x3c\x6e\x6a\xc0\x1a\x6f\x04\xa3\x85\x75\x47\xf2\x28\xa6\xd9\x5b\xf4\x19\x47\x84\xa1\xb7\x33\xbd\xc0\xd4\xd3\x83\xef\xc0\xf5\xf5\xf5\xcd\x9f\x05\xd6\x2b\x81\x02\xe0\x8b\xd9\x4d\x3f\x9d\x38\x02\x53\x1b\x41\x1c\x81\xca\x42\x9b\x92\x3d\x14\x5c\xed\x39\xcf\x48\x0a\x62\xda\xa4\xa8\xf2\x9b\xb7\x05\x20\x20\x31\x4e\x2a\x63\x28\x0c\x16\x35\x22\x50\xe2\xce\x7d\xeb\x1a\x8e\x25\x80\x9c\x6f\xdd\x88\xfc\x4f\x7b\x3a\xd1\x8b\x41\x03\x0d\xc2\xae\xb9\xae\x20\xf5\x4e\x17\x4e\x31\x42\x4a\xb3\x2c\xcf\x35\xaa\x63\xcc\xc8\x28\x78\xb7\x1a\xdf\x20\x6d\xf0\x74\xe1\x2c\x04\xd5\xdd\x40\x5d\x00\x41\x1a\xe1\xc5\xd4\x14\x7d\xdf\xe4\xdf\x0a\xc8\xb0\xcc\x94\xb3\x3a\x88\x70\xf5\x6c\x75\x9c\x45\xe6\x09\xd4\x1e\x5b\x89\xeb\x88\x80\x23\x64\xa2\x1f\x70\x0a\xb9\x68\xb3\x0e\x99\x29\xc0\xa3\xe1\xd0\x08\xca\x4c\x6a\x5b\x0f\x8d\xe8\x16\x98\x0e\x91\xcf\x25\xde\x2b\x97\x6e\x10\x5e\x90\xd7\x9e\xf1\x00\x6b\x83\x15\x70\xd0\xa3\x1b\x7f\x50\xa5\xed\xb6\xf4\x17\xe1\xc2\x8b\xce\x19\x92\x95\x6d\x42\xd0\x97\xfd\x09\x54\x32\xa9\xb6\x4d\x60\xe6\x96\x4e\xd2\xd8\x0b\x8e\x0d\xf4\xa5\x6b\x0e\x6d\x0e\xfd\x7a\x58\xac\xde\x78\xe5\x12\x3e\x5f\x57\xbc\xc4\x31\x15\x80\x91\x30\x58\x7d\x5f\xa9\x9c\x7a\x80\x0b\x9a\x63\xed\x82\x62\x75\x5e\x43\x68\xc2\x60\xf9\x44\x3d\xfe\x68\x77\xd5\x4e\xd1\x3f\xef\xc8\x31\xad\x70\x4e\xea\x53\x41\xb6\x99\x57\x3c\x97\x27\x88\x33\xc0\x01\xe1\x26\x24\xe8\x95\xcb\x08\x4c\xe0\x2e\xaf\x82\x55\x89\x2b\x88\x87\xe5\xef\x98\xf4\xbe\x01\xe4\x16\x9d\x62\xd3\xcf\x0f\xa6\xe2\x9f\x2a\x38\x84\x5c\xc5\xd1\x42\x96\xeb\xb4\x53\x78\xb0\xcd\x4d\x1a\x39\xf1\x16\x17\x6d\x0b\xb1\xd3\x3b\x90\x63\x3a\x44\x73\xf9\x6d\x69\x27\xf5\x8a\xd0\x9e\x54\xf2\xf4\xc3\xcc\xe9\x04\xe5\x34\x49\x98\xb3\xc1\xf6\x92\x34\x4d\xed\x52\xb7\xef\x5c\xb6\x6a\x95\x89\xae\x8c\x3b\x2d\xed\xc5\x07\x27\xe8\x7e\xed\x29\x09\x75\x8f\x49\x20\x9d\x08\x89\xb9\x5a\x02\x4c\x79\xdd\xca\x7f\x2a\x13\x96\x6c\x66\x5f\xe8\x2f\xb8\x11\xb7\x68\x47\xdc\x72\x7e\x19\xbe\xbf\x74\xae\x37\x55\x2d\x7d\x37\x78\xf7\x3a\xb4\xd7\x43\xe6\x2b\x1f\x8c\x9d\x2c\x9f\x0e\xc7\xf0\xe6\x0c\x36\x72\x9e\xd0\x94\x92\xaa\xee\xa3\xe4\x3d\x6b\x88\x43\xca\x93\x7d\xcd\x04\xce\x1e\xa1\xdc\x51\x49\x1f\xa6\x96\xd7\x13\x34\x9f\x87\x13\x48\xca\x05\x34\x63\x18\x27\x7e\xb3\x73\x8a\xd6\x19\xdf\xab\xbe\xe3\x29\x5a\xae\xde\x45\xc9\x95\x67\xf5\xcf\xb4\x2c\x19\x94\x93\x6c\xe3\x18\xbc\xaa\x5a\xb3\x2b\x43\x3a\x45\xb7\xdf\x87\xc0\x64\xd9\x63\xc2\x36\xbf\x9d\x16\x73\x16\xa7\x16\x5a\xdd\x35\x69\x6f\xca\xa4\xcf\x19\xa0\x96\x14\x2f\x82\xc4\x39\x47\x68\x15\x33\x72\xe2\xc5\x07\xbd\xfc\x42\x5f\x56\xad\x5d\xed\xcc\x38\x1d\xeb\xea\x27\x14\x3a\x19\x4d\x81\x61\x82\xe4\xf7\xd8\x39\xe4\x1a\x68\x2f\x12\x61\x3f\x0c\x7d\x38\xdb\x83\x5c\x47\x69\x37\x0a\x0a\x09\x8b\xd5\x0a\x50\xe0\xbe\x60\xfa\xf5\xc1\x60\x1c\x0f\x68\x3d\x35\xed\xfa\x89\x58\x74\xba\xb3\x4d\x79\x70\xa1\xcb\x60\x4a\x8b\x27\x03\xed\xb6\x9d\xeb\xce\x7d\xec\x84\x6f\x64\xe1\xb4\x11\xb1\x56\x22\x39\x9a\xba\xa4\x79\x87\x24\xe1\xe1\x24\xb8\xf0\x2d\x3a\xa0\x71\xbd\xb3\x6d\x01\x1e\xf5\x34\x07\x8f\xdd\x18\xa5\xd0\xc0\x54\x95\x9c\x69\x56\x3d\x9e\xb2\x7f\xca\xbd\xba\xba\x3a\x73\xca\x5d\xba\xb9\xdb\xef\x72\xc1\x45\xef\x15\xc4\x08\xc6\x7d\xc1\xfe\x29\x47\x1a\x96\x90\x98\x57\x26\x43\x9d\x09\xdd\xef\x5e\x67\x0f\x40\x56\x8b\x6d\x08\xbe\xae\xcb\xcb\xcb\xa7\x14\x35\xf6\x68\x79\x4e\x1c\xcd\x77\xbd\x77\xce\xf9\xa2\xff\xa6\xe6\x34\x3f\xf3\x52\xb1\x99\xa9\xcb\x00\x7b\x31\x10\x03\x74\x04\xaa\xab\xf8\x76\x90\x09\x51\xd6\xeb\xd9\x2c\x4e\x8a\x6f\x75\x10\x33\xde\x24\x29\x83\xea\x0f\x62\x9e\xcf\xf0\x37\x7c\x3f\x63\x34\xaa\x67\xdf\xfe\xdb\x90\xea\x38\x5b\x04\xf3\x60\x69\x1e\x82\x9c\x16\xc1\xb7\x7a\x70\x72\x23\x01\xca\x94\x02\x5f\x9b\x38\x96\xe4\x76\x20\x43\x30\xfb\x86\xf7\x58\xaf\xca\xfb\x88\xd7\xa3\x03\x2d\xa0\x11\x4f\x50\x02\x4e\xe4\x80\x8c\x89\x0a\x4c\x0a\x7e\x24\xe3\xa0\x22\x38\x39\x8e\xd2\xa6\x88\x65\xcc\x46\x63\x88\x09\xc8\x7d\x3d\x1a\xaa\xc3\xc9\x70\x1c\x44\xac\xa9\x7c\xba\x54\xbb\x87\x23\xfa\x6b\x98\x9c\x35\xba\x05\x66\xf9\xc3\x94\x2e\x4d\xd1\x48\x11\x82\x3d\x66\xa3\xf1\xd8\x60\x56\x2f\x01\xd0\x3f\x30\x5c\xd7\xa3\xa1\x7c\xfd\x18\x9a\x2d\x84\xd5\xc4\x63\xab\x48\x0e\x99\x3e\xe1\x7c\x84\xef\x1f\x8c\x6a\x5b\x9c\x52\xfb\xd0\x36\x85\xa1\x66\xb0\xc4\x00\xec\x1d\xc6\x8c\xc6\x77\x81\x29\xf8\xe1\x04\x39\x4f\x88\x71\xf5\x4f\x7c\x51\x04\x9e\xa6\x10\x7d\x49\x52\xb6\xe9\xd6\x3d\x1a\x07\x7a\x7d\xd4\x65\x35\x7d\xdb\xb2\x42\x84\x93\xd6\x38\xdd\xb1\x8c\x89\x7a\xc3\x3d\xb0\x12\x90\xb8\x23\xff\x46\x53\xab\x29\x90\xdd\xba\x15\x7a\x74\x3c\xbf\x77\x78\xa0\xc3\x1b\x39\x46\x69\x10\x43\xac\x1e\xba\xfd\xff\x88\xfe\x81\x86\xe5\xfd\x70\xe2\x0d\x81\x7b\xb3\xaa\x51\x6e\x8d\xe9\x67\xc7\xf5\x5b\x63\xee\xe3\x99\xc0\xba\xde\x49\x8a\x04\xe9\x33\x95\x3b\xed\x7e\x84\xa5\x9c\xff\xe1\x3d\x73\x6f\xc3\x97\x5f\xba\xc4\x93\xbc\x28\xa3\x74\x2a\x7c\x34\x78\x96\xb5\x86\x8d\x86\xea\x0e\x49\x1f\x1e\x00\xb4\x2e\xf3\x5d\xc9\x63\x2b\x57\x31\x03\x57\xdd\x44\x39\x35\x29\x54\x92\x5c\x40\xba\x35\xb6\x99\xd9\x3b\xc2\x8d\xbc\xb5\xdb\xaa\x9a\xdf\xe8\xfb\x34\x53\x83\xd9\x7c\xfb\x15\x66\xa8\xb2\xe1\x33\x87\xe3\x2e\xec\x99\x5b\xda\x72\xfb\xfe\x88\xbe\x54\x01\xfa\x44\x8a\xea\x08\x94\xa5\x91\x6a\x24\xc8\x07\xb5\x13\x2b\x33\x6f\x07\x0f\x0f\x28\xf8\x51\xfd\xfe\xed\xe7\xcf\xe8\xf1\x71\x80\x72\x22\x32\x9e\xdc\x0e\xbe\xfe\xf4\xcb\xaf\x03\xe8\x3d\x50\x5a\x34\x81\x99\x6d\x54\x24\x74\x8f\x62\x19\x9f\xdb\x81\x92\x69\x6e\x2d\x81\xa2\xef\x88\x74\x6f\x20\x39\xa6\x0c\x76\xc3\x70\xb3\x0f\xdb\x0d\xf4\xf6\xc2\xee\x75\xef\x3c\xaa\xc7\x00\xc1\x27\xc3\xab\xa0\x23\x58\xf9\xea\xfa\x60\xfb\x51\x0a\xdb\xcc\xf4\x83\x89\x1f\xd8\xf4\x5d\xd6\x95\xc0\x70\x80\xb3\x83\x35\xd0\x3d\xff\x45\x36\x7e\x35\xf2\x9e\x34\xd3\xbc\x07\x69\x6b\xf4\xc3\xc0\x89\xd5\xb4\xf6\x6c\x3a\xd8\xaa\x34\x5b\x15\x1d\x17\x6d\x63\xd2\xbc\xa6\xef\xf4\x9c\xf0\x3a\x42\xeb\x48\xc7\x98\x99\xde\xae\x81\x22\xc1\x61\x61\x22\xe7\x91\xe1\xc1\x28\xab\x48\xaa\x47\x0c\x4c\x98\xc3\xe1\x10\xe4\x55\x26\x31\x16\x44\x64\x36\x40\x02\x5e\xbc\xe4\xd8\xf8\x4f\xc4\x70\x71\x07\x6a\xe4\xc4\x73\x43\x09\x76\x74\xb8\xa1\x14\x77\xa4\x9e\x31\xbe\xe3\x53\xbb\x5c\x16\x3b\x69\x1b\x36\xea\xca\xed\x17\x9c\x10\x38\xc1\x88\x0c\x31\x28\xc8\xc9\xf7\x5b\xd0\x29\x02\x0c\x92\x4b\xeb\x9e\x76\x4a\x3d\xe8\x0a\x83\xe2\x50\xf7\xf3\xff\x0f\x00\x00\xff\xff\x45\xa0\x01\xb5\xb7\x17\x00\x00")

func assets_login_html_bytes() ([]byte, error) {
	return bindata_read(
		_assets_login_html,
		"assets/login.html",
	)
}

func assets_login_html() (*asset, error) {
	bytes, err := assets_login_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/login.html", size: 6071, mode: os.FileMode(420), modTime: time.Unix(1441032226, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_profile_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x36\x19\xa9\x89\x29\x20\x06\x90\x99\x9b\x5a\x92\xa8\x90\x9c\x91\x58\x54\x9c\x5a\x62\xab\x54\x5a\x92\xa6\x6b\xa1\x04\x95\x2a\xc9\x2c\xc9\x49\xb5\xb3\xd1\x87\xd0\x20\x7d\xfa\x30\x8d\x36\x49\xf9\x29\x95\x50\x65\x19\xc6\x76\x25\xa9\xc5\x25\x40\x49\x63\x88\x22\x88\x1c\x90\x0f\xb6\x0e\x10\x00\x00\xff\xff\x96\x80\x8d\x0f\x86\x00\x00\x00")

func assets_profile_html_bytes() ([]byte, error) {
	return bindata_read(
		_assets_profile_html,
		"assets/profile.html",
	)
}

func assets_profile_html() (*asset, error) {
	bytes, err := assets_profile_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/profile.html", size: 134, mode: os.FileMode(420), modTime: time.Unix(1441030473, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/login.html": assets_login_html,
	"assets/profile.html": assets_profile_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"login.html": &_bintree_t{assets_login_html, map[string]*_bintree_t{
		}},
		"profile.html": &_bintree_t{assets_profile_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

